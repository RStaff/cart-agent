#!/usr/bin/env bash
set -euo pipefail

hr(){ printf '%0.s-' {1..80}; echo; }
say(){ echo -e "$@"; }

ensure_mailer(){
  mkdir -p web/lib
  cat > web/lib/mailer.js <<'JS'
import nodemailer from "nodemailer";
import * as ResendSDK from "resend";
import sgMail from "@sendgrid/mail";

const PROVIDER = (process.env.EMAIL_PROVIDER || "ethereal").toLowerCase();

/** sendRecoveryEmail({ to, subject, text }) */
export async function sendRecoveryEmail({ to, subject, text }) {
  if (!to) throw new Error("Missing 'to'");
  if (!subject) subject = "Complete your order";
  if (!text) text = "Finish checking out—your items are waiting.";

  if (PROVIDER === "resend") {
    const apiKey = process.env.RESEND_API_KEY;
    const from = process.env.RESEND_FROM || "Cart Agent <cart@yourdomain.com>";
    if (!apiKey) throw new Error("RESEND_API_KEY missing");
    const resend = new ResendSDK.Resend(apiKey);
    const { data, error } = await resend.emails.send({ from, to, subject, text });
    if (error) throw error;
    return { messageId: data?.id };
  }

  if (PROVIDER === "sendgrid") {
    const apiKey = process.env.SENDGRID_API_KEY;
    const from = process.env.SENDGRID_FROM || "cart@yourdomain.com";
    if (!apiKey) throw new Error("SENDGRID_API_KEY missing");
    sgMail.setApiKey(apiKey);
    const [resp] = await sgMail.send({ to, from, subject, text });
    return { messageId: resp?.headers?.["x-message-id"] || resp?.headers?.["x-message-id"] };
  }

  // Default: Ethereal (dev previews)
  const testAccount = await nodemailer.createTestAccount();
  const transport = nodemailer.createTransport({
    host: testAccount.smtp.host,
    port: testAccount.smtp.port,
    secure: testAccount.smtp.secure,
    auth: { user: testAccount.user, pass: testAccount.pass },
  });
  const info = await transport.sendMail({
    from: `"Cart Agent (DEV)" <noreply@example.com>`,
    to, subject, text,
  });
  const previewUrl = nodemailer.getTestMessageUrl(info);
  console.log(`📬 Email queued: ${previewUrl || "(no preview url)"}`);
  return { messageId: info.messageId, previewUrl };
}
JS
}

ensure_env_examples(){
  grep -qxF 'web/.env' .gitignore || echo 'web/.env' >> .gitignore
  cat > web/.env.example <<'ENV'
DATABASE_URL="file:../dev.db"

# OpenAI (optional for AI copy in dev)
OPENAI_API_KEY=""

# Email provider: ethereal | resend | sendgrid
EMAIL_PROVIDER="ethereal"

# Resend (prod)
RESEND_API_KEY=""
RESEND_FROM="Cart Agent <cart@yourdomain.com>"

# SendGrid (alt prod)
SENDGRID_API_KEY=""
SENDGRID_FROM="cart@yourdomain.com"
ENV
  awk '1' web/.env.example > web/.env
}

ensure_imports_and_retry(){
  # import mailer
  grep -q 'from "./lib/mailer.js"' web/index.js || \
    (printf 'import { sendRecoveryEmail } from "./lib/mailer.js";\n' | cat - web/index.js > web/index.tmp && mv web/index.tmp web/index.js)

  # ensure withRetry helper
  if ! grep -q 'function withRetry' web/index.js; then
    cat >> web/index.js <<'JS'

// --- Lightweight retry helper (3 tries, 500ms backoff) ---
async function withRetry(fn, attempts = 3, baseMs = 500) {
  let lastErr;
  for (let i = 0; i < attempts; i++) {
    try { return await fn(); } catch (e) {
      lastErr = e;
      const wait = baseMs * Math.pow(2, i);
      console.warn(`[retry] attempt ${i+1} failed: ${e.message}. Waiting ${wait}ms…`);
      await new Promise(r => setTimeout(r, wait));
    }
  }
  throw lastErr;
}
JS
  fi

  # wrap sendRecoveryEmail with withRetry (idempotent)
  if grep -q 'await sendRecoveryEmail' web/index.js; then
    sed -i '' 's/await sendRecoveryEmail/await withRetry(() => sendRecoveryEmail/' web/index.js || true
  fi
  # fix missing closing paren if any (turn ...}); -> ...}));)
  sed -i '' \
    's/withRetry(() => sendRecoveryEmail({ \([^}]*\) });/withRetry(() => sendRecoveryEmail({ \1 }));/' \
    web/index.js || true
}

start_dev(){
  pkill -f "shopify app dev" >/dev/null 2>&1 || true
  rm -f dev.log
  (shopify app dev | tee dev.log) &

  # wait for ports to appear
  for i in {1..40}; do
    sleep 0.3
    PROXY_PORT=$(grep -o 'Proxy server started on port [0-9]\+' dev.log | tail -n1 | awk '{print $NF}') || true
    LOCAL_PORT=$(grep -o '\[local] webhook receiver listening at http://localhost:[0-9]\+' dev.log | tail -n1 | sed 's/.*://') || true
    if [[ -n "${PROXY_PORT:-}" && -n "${LOCAL_PORT:-}" ]]; then break; fi
  done
  if [[ -z "${PROXY_PORT:-}" || -z "${LOCAL_PORT:-}" ]]; then
    say "❌ Could not discover ports from dev.log"; exit 1
  fi
  export PROXY_PORT LOCAL_PORT
  say "   • Proxy port: $PROXY_PORT"
  say "   • Local port: $LOCAL_PORT"
}

smoke_test(){
  hr
  say "==> Smoke test → http://localhost:$PROXY_PORT/api/abandoned-cart"
  RESP=$(curl -sS -i -X POST "http://localhost:$PROXY_PORT/api/abandoned-cart" \
    -H "Content-Type: application/json" \
    -d "{\"checkoutId\":\"SMOKE-$RANDOM\",\"email\":\"smoke@example.com\",\"lineItems\":[{\"id\":1,\"title\":\"Test Item\",\"quantity\":1}],\"totalPrice\":9.99}")
  echo "$RESP" | sed -n '1,12p'
  STATUS=$(printf "%s" "$RESP" | awk 'NR==1{print $2}')
  if [[ "$STATUS" != "201" ]]; then
    say "==> ⚠️  Non-201 ($STATUS). See dev.log tail:"; tail -n 80 dev.log; exit 1
  fi
  say "==> ✅ 201 Created."

  say "==> Looking for latest Ethereal preview URL…"
  PREVIEW=$(grep -o 'https://ethereal\.email/message[^ ]*' dev.log | tail -n1)
  if [[ -n "${PREVIEW:-}" ]]; then
    say "   📬 Email preview: $PREVIEW"
  else
    say "   (none yet)"
  fi

  if command -v sqlite3 >/dev/null; then
    say "==> Latest DB row:"
    sqlite3 dev.db "SELECT id, checkoutId, email, totalPrice, datetime(createdAt/1000,'unixepoch') FROM AbandonedCart ORDER BY id DESC LIMIT 1;"
  fi
  hr
}

# ---- main ----
ensure_mailer
ensure_env_examples
ensure_imports_and_retry
start_dev
smoke_test
say "==> Done."
say "   • Re-run:   ./scripts/mvp_all_in_one.sh"
