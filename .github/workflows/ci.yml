name: Verify deps, E2E smoke, and Next preview with live curl

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NEXT_TELEMETRY_DISABLED: "1"

jobs:
  deps-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      HUSKY: "0"
      NPM_CONFIG_FUND: "false"
      NPM_CONFIG_AUDIT: "false"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Dependency / lockfile check (self-contained)
        shell: bash
        run: |
          set -Eeuo pipefail
          roots=()
          for r in . web web/frontend; do
            [ -f "$r/package.json" ] && roots+=("$r")
          done
          echo "Roots to check: ${roots[*]}"
          fail=0
          for r in "${roots[@]}"; do
            echo "── Checking: $r"
            if [ -f "$r/package-lock.json" ]; then
              npm --prefix "$r" ci --ignore-scripts --dry-run || fail=1
            elif [ -f "$r/yarn.lock" ]; then
              (cd "$r" && corepack enable >/dev/null 2>&1)
              (cd "$r" && yarn install --frozen-lockfile --ignore-scripts --non-interactive --dry-run) || fail=1
            else
              echo "⚠️ No lockfile in $r — skipping"
            fi
          done
          exit $fail

  e2e-smoke:
    needs: deps-check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      HUSKY: "0"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Locate Playwright projects
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          roots=()
          for r in . web; do
            if ls "$r"/playwright.config.* >/dev/null 2>&1; then
              roots+=("$r")
            fi
          done
          if [ ${#roots[@]} -eq 0 ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            printf '%s\n' "${roots[@]}" > pw_roots.txt
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Install deps + browsers & run smoke
        if: steps.locate.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r R; do
            echo "=== Playwright root: $R ==="
            npm --prefix "$R" ci
            (cd "$R" && npx playwright install --with-deps)
            if jq -e '.scripts["test:e2e:ci"]' "$R/package.json" >/dev/null 2>&1; then
              (cd "$R" && npm run -s test:e2e:ci)
            else
              (cd "$R" && npx playwright test --reporter=list)
            fi
          done < pw_roots.txt
      - name: Upload Playwright artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            **/playwright-report/**
            **/test-results/**
          if-no-files-found: ignore

  build-preview:
    needs: e2e-smoke
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      HUSKY: "0"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Locate Next.js app roots
        id: nxloc
        shell: bash
        run: |
          set -euo pipefail
          roots=()
          for r in . web; do
            if [ -f "$r/package.json" ] && jq -e '.dependencies.next or .devDependencies.next' "$r/package.json" >/dev/null 2>&1; then
              if ls "$r"/next.config.* >/dev/null 2>&1; then
                roots+=("$r")
              fi
            fi
          done
          if [ ${#roots[@]} -eq 0 ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            printf '%s\n' "${roots[@]}" > next_roots.txt
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Next apps (standalone) + pack preview
        if: steps.nxloc.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p preview
          pack() {
            local R="$1"
            local OUT="preview/$(echo "$R" | tr '/.' '__')"
            mkdir -p "$OUT"
            cp -a "$R/.next/standalone/." "$OUT"/
            mkdir -p "$OUT/.next/static"
            cp -a "$R/.next/static/." "$OUT/.next/static/" 2>/dev/null || true
            [ -d "$R/public" ] && cp -a "$R/public" "$OUT"/
            cat > "$OUT/README.txt" <<TXT
Run locally:
  PORT=3000 node server.js
TXT
          }
          while IFS= read -r R; do
            echo "=== Next root: $R ==="
            npm --prefix "$R" ci
            (cd "$R" && npx next build)
            [ -d "$R/.next/standalone" ] || { echo "❌ No standalone at $R/.next/standalone (set output: 'standalone' in next.config)"; exit 1; }
            pack "$R"
          done < next_roots.txt

      - name: Upload preview artifacts
        if: steps.nxloc.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: next-standalone-preview
          path: preview/**
          if-no-files-found: error

      - name: Tiny smoke-serve check (curl) with logs
        if: steps.nxloc.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          ROOT=$(head -n1 next_roots.txt)
          APPDIR="preview/$(echo "$ROOT" | tr '/.' '__')"
          cd "$APPDIR"

          echo "Starting preview server on PORT=4000 for curl smoke…"
          PORT=4000 node server.js > preview-smoke.log 2>&1 &
          PID=$!
          cleanup() { kill $PID 2>/dev/null || true; }
          trap cleanup EXIT

          echo "Waiting up to 30s for readiness…"
          ok=0
          for i in {1..30}; do
            if curl -fsS "http://localhost:4000/api/status" > ../preview-curl.out 2> ../preview-curl.err || \
               curl -fsS "http://localhost:4000/" > ../preview-curl.out 2> ../preview-curl.err; then
              ok=1; break
            fi
            sleep 1
          done

          if [ "$ok" -eq 1 ]; then
            echo "✅ Smoke check succeeded"
          else
            echo "❌ Smoke serve check failed (no response). See logs."
            exit 1
          fi

      - name: Upload smoke-serve logs on failure
        if: failure() && steps.nxloc.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: preview-smoke-logs
          path: |
            preview/**/preview-smoke.log
            preview-curl.out
            preview-curl.err
          if-no-files-found: ignore
