{"ok":true,"entry":"src/index.js","isESM":true,"diff":{"adds":63,"dels":64},"preview":"import checkoutPublic from \"./dev/checkoutPublic.esm.js\";\n\nimport express from \"express\";\nimport cors from \"cors\";\nimport { meRouter } from \"./routes/me.js\";\nimport { billingRouter, stripeWebhook } from \"./routes/billing.js\";\nimport { attachUser } from \"./middleware/attachUser.js\";\nimport { usageGate } from \"./middleware/usageGate.js\";\nimport { devAuth } from \"./middleware/devAuth.js\";\nimport { router as devCheckoutBypass } from \"./dev/checkoutBypass.dev.js\";\n\nconst app = express();\napp.use(\"/api/billing/checkout\", checkoutPublic);\napp.use(\"/__public-checkout\", checkoutPublic);\n\napp.get(\"/__public-checkout/_status\", (req,res)=>res.json({ok:true, public:String(process.env.ALLOW_PUBLIC_CHECKOUT||\"\"), price: process.env.STRIPE_PRICE_ID ? \"set\":\"missing\"}));\n\n// Root route: plain text hinting available endpoints\napp.get('/', (req,res)=>{ res.type('text/plain').send('Cart Agent API. Try /hello and /healthz'); });\n\napp.post(\"/api/billing/webhook\", express.raw({ type: \"application/json\" }), stripeWebhook);\napp.use(cors());\napp.use(express.json());\napp.use(devAuth);\napp.use(devCheckoutBypass);\n\n// Dev-only auth compat shim — makes common guards pass when using DEV_AUTH_TOKEN\napp.use((req, _res, next) => {\n  const required = process.env.DEV_AUTH_TOKEN;\n  const hdr = req.headers.authorization || \"\";\n  const ok = required && hdr.startsWith(\"Bearer \") && hdr.slice(7).trim() === required;\n  if (ok) {\n    if (typeof req.isAuthenticated !== \"function\") req.isAuthenticated = () => true;\n    req.session = req.session || {};\n    if (req.user?.id) req.session.userId = req.user.id;\n  }\n  next();\n});\n\napp.use(attachUser);\n\napp.get(\"/healthz\", (_req, res) => res.type(\"text/plain\").send(\"ok\"));\napp.get(\"/hello\", (_req, res) => res.json({ msg: \"Hello from Cart Agent!\" }));\n\napp.use(\"/api/me\", meRouter);\napp.use(\"/api/billing\", billingRouter);\n\napp.post(\"/api/abando/run\", usageGate({ kind: \"abandoned_cart_run\", cost: 1 }), async (_req, res) => {\n  res.json({ ok: true, message: \"Ran the agent ✨\" });\n});\nexport default app;\n\n// Dev probe: whoami (works only when DEV_AUTH_TOKEN is provided)\napp.get(\"/api/dev/whoami\", (req, res) => {\n  if (!process.env.DEV_AUTH_TOKEN) return res.status(404).end();\n  res.json({ user: req.user || null });\n});\n\n/** Dev-only: confirms this file was patched. */\napp.get(\"/api/dev/middleware-order\", (_req, res) => {\n  res.json({ ok: true, checks: [\"express.json\", \"devAuth\"] });\n});\n\n/** Dev-only: env & auth sanity (no secrets leaked, only presence booleans). */\napp.get(\"/api/dev/diag\", (req, res) => {\n  const hasDev = !!process.env.DEV_AUTH_TOKEN;\n  const hasStripeKey = !!process.env.STRIPE_SECRET_KEY;\n  const hasPrice = !!process.env.STRIPE_PRICE_ID;\n  const who = req.user || null;\n  const authed = typeof req.isAuthenticated === \"function\" ? req.isAuthenticated() : false;\n  res.json({\n    ok: true,\n    env: { hasDev, hasStripeKey, hasPrice },\n    auth: { user: who, isAuthenticated: authed }\n  });\n});\n"}
